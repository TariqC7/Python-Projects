Jamaican Space Invaders

import turtle
import os
import math
import random

#Setup the screen
wn = turtle.Screen()
wn.bgcolor("black")
wn.title("Jamaican Space Invaders")
wn.bgpic("invaders_background.gif")

#Register the shapes
turtle.register_shape("invader.gif")


#Draw Border
border_pen = turtle.Turtle()
border_pen.speed(0)
border_pen.color("white")
border_pen.penup()
border_pen.setposition(-300,-300)
border_pen.pendown
border_pen.pensize(3)
for side in range(4):
    border_pen.fd(600)
    border_pen.lt(90)
border_pen.hideturtle()

#Set the score to 0
score = 0

#Draw the score
score_pen = turtle.Turtle()
score_pen.speed(0)
score_pen.color("white")
score_pen.penup()
score_pen.setposition(-290, 280)
scorestring = "Score: %s" %score
score_pen.write(scorestring, False, align = "left", font = ("Arial", 14, "normal"))
score_pen.hideturtle()

#Create the player turtle
player = turtle.Turtle()
player.color("blue")
player.color("triangle")
player.penup()
player.speed(0)
player.setposition(0,-250)
player.setheading(90)

playerspeed = 15

#Choose the number of enemies
number_of_enemies = 5
#Create an empty list of enemies
enemies = []

#Add enemies to the list
for i in range(number_of_enemies):
    #Create the enemy
    enemies.append(turtle.Turtle())

for enemy in enemies:
    enemy.color("red")
    enemy.shape("invader.gif")
    enemy.penup()
    enemy.speed(0)
    x = random.randint(-200, 200)
    y = random.randint(100, 250)
    enemy.setposition(x, y)

enemyspeed = 2


#Create the player's laser
laser = turtle.Turtle()
laser.color("yellow")
laser.shape("triangle")
laser.penup()
laser.speed(0)
laser.setheading(90)
laser.shapesize(0.5, 0.5)
laser.hideturtle()

laserspeed = 20

#Define laser state
#ready - ready to fire
#fire - laser is firing
laserstate = "ready"

#Move the player left and right
def move_left():
    x = player.xcor()
    #takes the current value of x subtracts playerspeed and assigns that to x
    x -= playerspeed
    #make sure new x location is inside the boundaries
    if x < -280:
        x = -280
    player.setx(x)

def move_right():
    x = player.xcor()
    x += playerspeed
    #boundary checking based on x coordinates
    if x > 280:
        x = 280
    player.setx(x)

def fire_laser():
    #Declare laserstate as a global if it needs changes
    global laserstate
    if laserstate == "ready":
        laserstate = "fire"
        #Move the laser to just above the player
        x = player.xcor()
        y = player.ycor() + 10
        laser.setposition(x, y)
        laser.showturtle()

def isCollision(t1, t2):
    #Using pythagoras' theorem
    distance = math.sqrt(math.pow(t1.xor(),2)+math.pow(t1.ycor()-t2.ycor(),2))
    if distance < 15:
        return True
    else:
        return False
    
    
#Create keyboard bindings
turtle.listen()
turtle.onkey(move_left, "Left")
turtle.onkey(move_right, "Right")
turtle.onkey(fire_laser, "space")

#Main Loop

while True:

    for enemy in enemies:
        #Move the enemy
        x = enemy.xcor()
        x += enemyspeed
        enemy.setx(x)

        #Move the enemy back and down
        if enemy.xcor() > 280:
            #Using a nested loops
            #Move all enemies down
            for e in enemies:
                y = e.ycor()
                y -= 40
                e.sety(y)
            #Change enemy direction
            enemyspeed *= -1
            
        if enemy.xcor() < -280:
            #Move all enemies down
            for e in  enemies:
                y = e.ycor()
                y -= 40
                e.sety(y)
            #Change enemy direction
            enemyspeed *= -1

        #Check for collision between the bullet and the enemy
        if isCollision (laser, enemy):
            #Reset the laser
            laser.hideturtle()
            laserstate = "ready"
            laser.setposition(0, -400)
            #Reset the enemy
            x = random.randint(-200, 200)
            y = random.randint(100, 250)
            enemy.setposition(x, y)
            #Update the score
            score += 10
            scorestring = "Score: %s" %score
            score_pen.clear()
            score_pen.write(scorestring, False, align = "left", font = ("Arial", 14, "normal"))
            
        if isCollision (player, enemy):
            player.hideturtle()
            enemy.hideturtle()
            print("Game Over")
            break

  #Move the laser
  if laserstate == "fire":
     y = laser.ycor()
     y += laserspeed
     laser.sety(y)

  #Check to see if the laser has gone to the top
  if laser.ycor() > 275:
      laser.hideturtle()
      laserstate = "ready"
            
    
    


delay = raw_input("Press enter to finish.")


